// Package preflight_kit_api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package preflight_kit_api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/google/uuid"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ExperimentExecutionAOCreatedVia.
const (
	ExperimentExecutionAOCreatedViaAPI      ExperimentExecutionAOCreatedVia = "API"
	ExperimentExecutionAOCreatedViaCLI      ExperimentExecutionAOCreatedVia = "CLI"
	ExperimentExecutionAOCreatedViaSCHEDULE ExperimentExecutionAOCreatedVia = "SCHEDULE"
	ExperimentExecutionAOCreatedViaUI       ExperimentExecutionAOCreatedVia = "UI"
)

// Defines values for ExperimentExecutionStepActionAOActionKind.
const (
	ATTACK   ExperimentExecutionStepActionAOActionKind = "ATTACK"
	BASIC    ExperimentExecutionStepActionAOActionKind = "BASIC"
	CHECK    ExperimentExecutionStepActionAOActionKind = "CHECK"
	LOADTEST ExperimentExecutionStepActionAOActionKind = "LOAD_TEST"
	OTHER    ExperimentExecutionStepActionAOActionKind = "OTHER"
)

// Defines values for ExperimentExecutionStepActionAOStepType.
const (
	ACTION ExperimentExecutionStepActionAOStepType = "ACTION"
)

// Defines values for ExperimentExecutionStepWaitAOStepType.
const (
	WAIT ExperimentExecutionStepWaitAOStepType = "WAIT"
)

// Defines values for ExperimentExecutionVariableAOOrigin.
const (
	ExperimentExecutionVariableAOOriginENVIRONMENT ExperimentExecutionVariableAOOrigin = "ENVIRONMENT"
	ExperimentExecutionVariableAOOriginEXECUTION   ExperimentExecutionVariableAOOrigin = "EXECUTION"
	ExperimentExecutionVariableAOOriginEXPERIMENT  ExperimentExecutionVariableAOOrigin = "EXPERIMENT"
	ExperimentExecutionVariableAOOriginSCHEDULE    ExperimentExecutionVariableAOOrigin = "SCHEDULE"
)

// Defines values for MutatingHttpMethod.
const (
	DELETE MutatingHttpMethod = "DELETE"
	POST   MutatingHttpMethod = "POST"
	PUT    MutatingHttpMethod = "PUT"
)

// Defines values for PreflightKitErrorStatus.
const (
	Errored PreflightKitErrorStatus = "errored"
	Failed  PreflightKitErrorStatus = "failed"
)

// Defines values for ReadHttpMethod.
const (
	GET ReadHttpMethod = "GET"
)

// AbstractExperimentExecutionStepAO A step that is executed as part of an experiment.
type AbstractExperimentExecutionStepAO struct {
	// CustomLabel Custom label assigned during experiment design to express the intention of this step
	CustomLabel *string `json:"customLabel,omitempty"`

	// Ended Timestamp when this experiment step ended
	Ended *time.Time `json:"ended,omitempty"`

	// Id Unique identifier of this step execution
	Id *openapi_types.UUID `json:"id,omitempty"`

	// IgnoreFailure Whether the experiment should fail/error immediately in case this step fails/errors.
	IgnoreFailure *bool `json:"ignoreFailure,omitempty"`

	// Parameters Step-specific parameters of the experiment step configuration
	Parameters *map[string]interface{} `json:"parameters,omitempty"`

	// PredecessorId Unique identifier of the step execution that precedes this step, null if it is the first step of a lane
	PredecessorId *openapi_types.UUID `json:"predecessorId,omitempty"`

	// Reason Reason in case this experiment step execution failed or errored
	Reason *string `json:"reason,omitempty"`

	// Started Timestamp when this experiment step was started
	Started *time.Time `json:"started,omitempty"`

	// State Current state of this step in the experiment (e.g. RUNNING, FAILED, ERRORED, COMPLETED)
	State *string `json:"state,omitempty"`

	// StepType Type of this step execution (e.g. ACTION, WAIT)
	StepType string `json:"stepType"`
	union    json.RawMessage
}

// AttributeAO An attributes (key-value-pair) that is associated to a target
type AttributeAO struct {
	// Key The key of the attribute, may be associated multiple times to the same target
	Key string `json:"key"`

	// Value The value of the attribute
	Value string `json:"value"`
}

// BlastRadiusAO Blast radius that is applied to define the set of targets as well as an optional random subset
type BlastRadiusAO struct {
	// Maximum In case a fixed number of as subset of specified targets should be effected
	Maximum *int32 `json:"maximum,omitempty"`

	// Percentage In case a percentage subset of the specified targets should be effected
	Percentage *int32 `json:"percentage,omitempty"`

	// Predicate Query defining the overall superset of targets being effected
	Predicate *TargetPredicate `json:"predicate,omitempty"`

	// TargetType Target type that is effected by that action
	TargetType *string `json:"targetType,omitempty"`
}

// CancelResult defines model for CancelResult.
type CancelResult struct {
	// Error An enhanced version of RFC 7807 Problem Details for HTTP APIs compliant response body for error scenarios
	Error *PreflightKitError `json:"error,omitempty"`
}

// DescribingEndpointReference HTTP endpoint which the Steadybit platform/agent could communicate with.
type DescribingEndpointReference struct {
	Method ReadHttpMethod `json:"method"`

	// Path Absolute path of the HTTP endpoint.
	Path string `json:"path"`
}

// ExperimentExecutionAO A single experiment execution that was triggered from a single experiment.
type ExperimentExecutionAO struct {
	// CanceledBy The user that connected the hub
	CanceledBy *UserSummaryAO `json:"canceledBy,omitempty"`

	// Created Timestamp when the experiment was created
	Created *time.Time `json:"created,omitempty"`

	// CreatedBy The user that connected the hub
	CreatedBy *UserSummaryAO `json:"createdBy,omitempty"`

	// CreatedVia The creation trigger that caused this experiment execution to be started
	CreatedVia *ExperimentExecutionAOCreatedVia `json:"createdVia,omitempty"`

	// Ended Timestamp when the experiment ended
	Ended *time.Time `json:"ended,omitempty"`

	// ExperimentVersion Experiment design version which can be used to identify changes between experiment runs
	ExperimentVersion *int32 `json:"experimentVersion,omitempty"`

	// Hypothesis The hypothesis that is validated by the experiment
	Hypothesis *string `json:"hypothesis,omitempty"`

	// Id Unique experiment execution id that identifies this specific experiment execution
	Id *int32 `json:"id,omitempty"`

	// Key Unique experiment key that identifies the experiment. Combination of `team key` and increasing number
	Key *string `json:"key,omitempty"`

	// Name Name of the experiment to easily identify the experiment
	Name *string `json:"name,omitempty"`

	// Reason Reason in case the experiment execution failed or errored
	Reason *string `json:"reason,omitempty"`

	// Requested Timestamp when the experiment was requested
	Requested *time.Time `json:"requested,omitempty"`

	// Started Timestamp when the experiment was started
	Started *time.Time `json:"started,omitempty"`

	// State Current state of the experiment (e.g. CREATED, RUNNING, FAILED, ERRORED, COMPLETED)
	State *string `json:"state,omitempty"`

	// Steps The steps that are executed in parallel or sequence in the experiment.
	Steps *[]AbstractExperimentExecutionStepAO `json:"steps,omitempty"`

	// Variables Variables and their origins that have been used for this execution
	Variables *map[string]ExperimentExecutionVariableAO `json:"variables,omitempty"`
}

// ExperimentExecutionAOCreatedVia The creation trigger that caused this experiment execution to be started
type ExperimentExecutionAOCreatedVia string

// ExperimentExecutionStepActionAO An action-step that is executed as part of an experiment.
type ExperimentExecutionStepActionAO struct {
	// ActionId Unique identifier of the action that is executed in this step
	ActionId *string `json:"actionId,omitempty"`

	// ActionKind Kind of the action (e.g. attack, check, loadtest)
	ActionKind *ExperimentExecutionStepActionAOActionKind `json:"actionKind,omitempty"`

	// CustomLabel Custom label assigned during experiment design to express the intention of this step
	CustomLabel *string `json:"customLabel,omitempty"`

	// Ended Timestamp when this experiment step ended
	Ended *time.Time `json:"ended,omitempty"`

	// Id Unique identifier of this step execution
	Id *openapi_types.UUID `json:"id,omitempty"`

	// IgnoreFailure Whether the experiment should fail/error immediately in case this step fails/errors.
	IgnoreFailure *bool `json:"ignoreFailure,omitempty"`

	// Parameters Step-specific parameters of the experiment step configuration
	Parameters *map[string]map[string]interface{} `json:"parameters,omitempty"`

	// PredecessorId Unique identifier of the step execution that precedes this step, null if it is the first step of a lane
	PredecessorId *openapi_types.UUID `json:"predecessorId,omitempty"`

	// Radius Blast radius that is applied to define the set of targets as well as an optional random subset
	Radius *BlastRadiusAO `json:"radius,omitempty"`

	// Reason Reason in case this experiment step execution failed or errored
	Reason *string `json:"reason,omitempty"`

	// Started Timestamp when this experiment step was started
	Started *time.Time `json:"started,omitempty"`

	// State Current state of this step in the experiment (e.g. RUNNING, FAILED, ERRORED, COMPLETED)
	State *string `json:"state,omitempty"`

	// StepType Type of this step execution (e.g. ACTION, WAIT)
	StepType ExperimentExecutionStepActionAOStepType `json:"stepType"`

	// TargetExecutions List of targets that are expected to be effected by this action. This list may change in case targets aren't available at the specific time of execution
	TargetExecutions *[]TargetAO `json:"targetExecutions,omitempty"`

	// TotalTargetCount Amount of targets that are effect int total
	TotalTargetCount *int64 `json:"totalTargetCount,omitempty"`
}

// ExperimentExecutionStepActionAOActionKind Kind of the action (e.g. attack, check, loadtest)
type ExperimentExecutionStepActionAOActionKind string

// ExperimentExecutionStepActionAOStepType Type of this step execution (e.g. ACTION, WAIT)
type ExperimentExecutionStepActionAOStepType string

// ExperimentExecutionStepWaitAO A wait step that is executed as part of an experiment.
type ExperimentExecutionStepWaitAO struct {
	// CustomLabel Custom label assigned during experiment design to express the intention of this step
	CustomLabel *string `json:"customLabel,omitempty"`

	// Ended Timestamp when this experiment step ended
	Ended *time.Time `json:"ended,omitempty"`

	// Id Unique identifier of this step execution
	Id *openapi_types.UUID `json:"id,omitempty"`

	// IgnoreFailure Whether the experiment should fail/error immediately in case this step fails/errors.
	IgnoreFailure *bool `json:"ignoreFailure,omitempty"`

	// Parameters Step-specific parameters of the experiment step configuration
	Parameters *map[string]map[string]interface{} `json:"parameters,omitempty"`

	// PredecessorId Unique identifier of the step execution that precedes this step, null if it is the first step of a lane
	PredecessorId *openapi_types.UUID `json:"predecessorId,omitempty"`

	// Reason Reason in case this experiment step execution failed or errored
	Reason *string `json:"reason,omitempty"`

	// Started Timestamp when this experiment step was started
	Started *time.Time `json:"started,omitempty"`

	// State Current state of this step in the experiment (e.g. RUNNING, FAILED, ERRORED, COMPLETED)
	State *string `json:"state,omitempty"`

	// StepType Type of this step execution (e.g. ACTION, WAIT)
	StepType ExperimentExecutionStepWaitAOStepType `json:"stepType"`
}

// ExperimentExecutionStepWaitAOStepType Type of this step execution (e.g. ACTION, WAIT)
type ExperimentExecutionStepWaitAOStepType string

// ExperimentExecutionVariableAO Variables and their origins that have been used for this execution
type ExperimentExecutionVariableAO struct {
	Origin *ExperimentExecutionVariableAOOrigin `json:"origin,omitempty"`
	Value  *string                              `json:"value,omitempty"`
}

// ExperimentExecutionVariableAOOrigin defines model for ExperimentExecutionVariableAO.Origin.
type ExperimentExecutionVariableAOOrigin string

// MutatingEndpointReference HTTP endpoint which the Steadybit platform/agent could communicate with.
type MutatingEndpointReference struct {
	Method MutatingHttpMethod `json:"method"`

	// Path Absolute path of the HTTP endpoint.
	Path string `json:"path"`
}

// MutatingEndpointReferenceWithCallInterval defines model for MutatingEndpointReferenceWithCallInterval.
type MutatingEndpointReferenceWithCallInterval struct {
	// CallInterval At what frequency should the state endpoint be called? Takes durations in the format of `100ms` or `10s`.
	CallInterval *string            `json:"callInterval,omitempty"`
	Method       MutatingHttpMethod `json:"method"`

	// Path Absolute path of the HTTP endpoint.
	Path string `json:"path"`
}

// MutatingHttpMethod defines model for MutatingHttpMethod.
type MutatingHttpMethod string

// PreflightDescription Provides details about a possible preflight, e.g., what configuration options it has, how to present it to end-users and how to trigger the preflight.
type PreflightDescription struct {
	// Cancel HTTP endpoint which the Steadybit platform/agent could communicate with.
	Cancel *MutatingEndpointReference `json:"cancel,omitempty"`

	// Description Description for end-users to help them understand what the preflight is doing.
	Description string `json:"description"`

	// Icon An icon that is used to identify your preflight in the ui. Needs to be a data-uri containing an image.
	Icon *string `json:"icon,omitempty"`

	// Id A technical ID that is used to uniquely identify this type of preflight. You will typically want to use something like `org.example.my-fancy-preflight`.
	Id string `json:"id"`

	// Label A human-readable label for the preflight.
	Label string `json:"label"`

	// Start HTTP endpoint which the Steadybit platform/agent could communicate with.
	Start MutatingEndpointReference `json:"start"`

	// Status HTTP endpoint which the Steadybit platform/agent could communicate with.
	Status MutatingEndpointReferenceWithCallInterval `json:"status"`

	// TargetAttributeIncludes A list of attributes of targets that are populated to the preflight in the experiment execution. If the list is empty, no attributes are populated.
	TargetAttributeIncludes []string `json:"targetAttributeIncludes"`

	// Version The version of the preflight. Remember to increase the value everytime you update the definitions. The platform will ignore any definition changes with the same preflight version. We do recommend usage of semver strings.
	Version string `json:"version"`
}

// PreflightKitError An enhanced version of RFC 7807 Problem Details for HTTP APIs compliant response body for error scenarios
type PreflightKitError struct {
	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	Instance *string `json:"instance,omitempty"`

	// Status * failed - The preflight has detected some failures, for example a failing test which has been implemented by the preflight. The preflight will be canceled, if this status is returned by the status endpoint. * errored - There was a technical error while executing the preflight. Will be marked as red in the platform. The preflight will be canceled, if this status is returned by the status endpoint.
	Status *PreflightKitErrorStatus `json:"status,omitempty"`

	// Title A short, human-readable summary of the problem type.
	Title string `json:"title"`

	// Type A URI reference that identifies the problem type.
	Type *string `json:"type,omitempty"`
}

// PreflightKitErrorStatus * failed - The preflight has detected some failures, for example a failing test which has been implemented by the preflight. The preflight will be canceled, if this status is returned by the status endpoint. * errored - There was a technical error while executing the preflight. Will be marked as red in the platform. The preflight will be canceled, if this status is returned by the status endpoint.
type PreflightKitErrorStatus string

// PreflightList Lists all preflights that the platform/agent could execute.
type PreflightList struct {
	Preflights []DescribingEndpointReference `json:"preflights"`
}

// ReadHttpMethod defines model for ReadHttpMethod.
type ReadHttpMethod string

// StartResult defines model for StartResult.
type StartResult struct {
	// Error An enhanced version of RFC 7807 Problem Details for HTTP APIs compliant response body for error scenarios
	Error *PreflightKitError `json:"error,omitempty"`
}

// StatusResult defines model for StatusResult.
type StatusResult struct {
	// Completed the agent will continue to poll the status endpoint as long as completed is false and no error is set
	Completed bool `json:"completed"`

	// Error An enhanced version of RFC 7807 Problem Details for HTTP APIs compliant response body for error scenarios
	Error *PreflightKitError `json:"error,omitempty"`
}

// TargetAO A target that is expected to be effected by this action.
type TargetAO struct {
	// AgentHostname The agent that processed this target-action command and forwarded it to the proper extension instance.
	AgentHostname *string `json:"agentHostname,omitempty"`

	// Attributes A set of attributes that have been discovered for this target. A key may be associated multiple time to a single target.
	Attributes *[]AttributeAO `json:"attributes,omitempty"`

	// Name Identifier of the target that is expected to be effected
	Name *string `json:"name,omitempty"`

	// Reason Reason on a per target-level why the experiment failed or errored. If this step didn't failed or errored (`state != 'FAILED' and state != 'ERRORED') the reason is `null`.
	Reason *string `json:"reason,omitempty"`

	// ReasonDetails Optional additional reason details on a per target-level why the the experiment failed or errored.
	ReasonDetails *string `json:"reasonDetails,omitempty"`

	// Source The source (i.e. call to the extension) that caused the step to error or fail.
	Source *string `json:"source,omitempty"`

	// State State of this specific step on a per target-level.
	State *string `json:"state,omitempty"`

	// Type Type of the target that is expected to be effected
	Type *string `json:"type,omitempty"`
}

// TargetPredicate Query defining the overall superset of targets being effected
type TargetPredicate = map[string]interface{}

// UserSummaryAO The user that connected the hub
type UserSummaryAO struct {
	Email      *string `json:"email,omitempty"`
	Name       *string `json:"name,omitempty"`
	PictureUrl *string `json:"pictureUrl,omitempty"`
	Username   *string `json:"username,omitempty"`
}

// CancelPreflightResponse defines model for CancelPreflightResponse.
type CancelPreflightResponse struct {
	union json.RawMessage
}

// DescribePreflightResponse defines model for DescribePreflightResponse.
type DescribePreflightResponse struct {
	union json.RawMessage
}

// PreflightListResponse defines model for PreflightListResponse.
type PreflightListResponse struct {
	union json.RawMessage
}

// PreflightStatusResponse defines model for PreflightStatusResponse.
type PreflightStatusResponse struct {
	union json.RawMessage
}

// StartPreflightResponse defines model for StartPreflightResponse.
type StartPreflightResponse struct {
	union json.RawMessage
}

// CancelPreflightRequestBody defines model for CancelPreflightRequestBody.
type CancelPreflightRequestBody struct {
	PreflightActionExecutionId uuid.UUID `json:"preflightActionExecutionId"`
}

// StartPreflightRequestBody defines model for StartPreflightRequestBody.
type StartPreflightRequestBody struct {
	// ExperimentExecution A single experiment execution that was triggered from a single experiment.
	ExperimentExecution        ExperimentExecutionAO `json:"experimentExecution"`
	PreflightActionExecutionId uuid.UUID             `json:"preflightActionExecutionId"`
}

// StatusPreflightRequestBody defines model for StatusPreflightRequestBody.
type StatusPreflightRequestBody struct {
	PreflightActionExecutionId uuid.UUID `json:"preflightActionExecutionId"`
}

// AsExperimentExecutionStepActionAO returns the union data inside the AbstractExperimentExecutionStepAO as a ExperimentExecutionStepActionAO
func (t AbstractExperimentExecutionStepAO) AsExperimentExecutionStepActionAO() (ExperimentExecutionStepActionAO, error) {
	var body ExperimentExecutionStepActionAO
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExperimentExecutionStepActionAO overwrites any union data inside the AbstractExperimentExecutionStepAO as the provided ExperimentExecutionStepActionAO
func (t *AbstractExperimentExecutionStepAO) FromExperimentExecutionStepActionAO(v ExperimentExecutionStepActionAO) error {
	t.StepType = "ACTION"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExperimentExecutionStepActionAO performs a merge with any union data inside the AbstractExperimentExecutionStepAO, using the provided ExperimentExecutionStepActionAO
func (t *AbstractExperimentExecutionStepAO) MergeExperimentExecutionStepActionAO(v ExperimentExecutionStepActionAO) error {
	t.StepType = "ACTION"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExperimentExecutionStepWaitAO returns the union data inside the AbstractExperimentExecutionStepAO as a ExperimentExecutionStepWaitAO
func (t AbstractExperimentExecutionStepAO) AsExperimentExecutionStepWaitAO() (ExperimentExecutionStepWaitAO, error) {
	var body ExperimentExecutionStepWaitAO
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExperimentExecutionStepWaitAO overwrites any union data inside the AbstractExperimentExecutionStepAO as the provided ExperimentExecutionStepWaitAO
func (t *AbstractExperimentExecutionStepAO) FromExperimentExecutionStepWaitAO(v ExperimentExecutionStepWaitAO) error {
	t.StepType = "WAIT"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExperimentExecutionStepWaitAO performs a merge with any union data inside the AbstractExperimentExecutionStepAO, using the provided ExperimentExecutionStepWaitAO
func (t *AbstractExperimentExecutionStepAO) MergeExperimentExecutionStepWaitAO(v ExperimentExecutionStepWaitAO) error {
	t.StepType = "WAIT"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AbstractExperimentExecutionStepAO) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"stepType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t AbstractExperimentExecutionStepAO) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "ACTION":
		return t.AsExperimentExecutionStepActionAO()
	case "WAIT":
		return t.AsExperimentExecutionStepWaitAO()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t AbstractExperimentExecutionStepAO) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.CustomLabel != nil {
		object["customLabel"], err = json.Marshal(t.CustomLabel)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'customLabel': %w", err)
		}
	}

	if t.Ended != nil {
		object["ended"], err = json.Marshal(t.Ended)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ended': %w", err)
		}
	}

	if t.Id != nil {
		object["id"], err = json.Marshal(t.Id)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'id': %w", err)
		}
	}

	if t.IgnoreFailure != nil {
		object["ignoreFailure"], err = json.Marshal(t.IgnoreFailure)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ignoreFailure': %w", err)
		}
	}

	if t.Parameters != nil {
		object["parameters"], err = json.Marshal(t.Parameters)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'parameters': %w", err)
		}
	}

	if t.PredecessorId != nil {
		object["predecessorId"], err = json.Marshal(t.PredecessorId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'predecessorId': %w", err)
		}
	}

	if t.Reason != nil {
		object["reason"], err = json.Marshal(t.Reason)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reason': %w", err)
		}
	}

	if t.Started != nil {
		object["started"], err = json.Marshal(t.Started)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'started': %w", err)
		}
	}

	if t.State != nil {
		object["state"], err = json.Marshal(t.State)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'state': %w", err)
		}
	}

	object["stepType"], err = json.Marshal(t.StepType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'stepType': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *AbstractExperimentExecutionStepAO) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["customLabel"]; found {
		err = json.Unmarshal(raw, &t.CustomLabel)
		if err != nil {
			return fmt.Errorf("error reading 'customLabel': %w", err)
		}
	}

	if raw, found := object["ended"]; found {
		err = json.Unmarshal(raw, &t.Ended)
		if err != nil {
			return fmt.Errorf("error reading 'ended': %w", err)
		}
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &t.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
	}

	if raw, found := object["ignoreFailure"]; found {
		err = json.Unmarshal(raw, &t.IgnoreFailure)
		if err != nil {
			return fmt.Errorf("error reading 'ignoreFailure': %w", err)
		}
	}

	if raw, found := object["parameters"]; found {
		err = json.Unmarshal(raw, &t.Parameters)
		if err != nil {
			return fmt.Errorf("error reading 'parameters': %w", err)
		}
	}

	if raw, found := object["predecessorId"]; found {
		err = json.Unmarshal(raw, &t.PredecessorId)
		if err != nil {
			return fmt.Errorf("error reading 'predecessorId': %w", err)
		}
	}

	if raw, found := object["reason"]; found {
		err = json.Unmarshal(raw, &t.Reason)
		if err != nil {
			return fmt.Errorf("error reading 'reason': %w", err)
		}
	}

	if raw, found := object["started"]; found {
		err = json.Unmarshal(raw, &t.Started)
		if err != nil {
			return fmt.Errorf("error reading 'started': %w", err)
		}
	}

	if raw, found := object["state"]; found {
		err = json.Unmarshal(raw, &t.State)
		if err != nil {
			return fmt.Errorf("error reading 'state': %w", err)
		}
	}

	if raw, found := object["stepType"]; found {
		err = json.Unmarshal(raw, &t.StepType)
		if err != nil {
			return fmt.Errorf("error reading 'stepType': %w", err)
		}
	}

	return err
}

// AsCancelResult returns the union data inside the CancelPreflightResponse as a CancelResult
func (t CancelPreflightResponse) AsCancelResult() (CancelResult, error) {
	var body CancelResult
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCancelResult overwrites any union data inside the CancelPreflightResponse as the provided CancelResult
func (t *CancelPreflightResponse) FromCancelResult(v CancelResult) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCancelResult performs a merge with any union data inside the CancelPreflightResponse, using the provided CancelResult
func (t *CancelPreflightResponse) MergeCancelResult(v CancelResult) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPreflightKitError returns the union data inside the CancelPreflightResponse as a PreflightKitError
func (t CancelPreflightResponse) AsPreflightKitError() (PreflightKitError, error) {
	var body PreflightKitError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPreflightKitError overwrites any union data inside the CancelPreflightResponse as the provided PreflightKitError
func (t *CancelPreflightResponse) FromPreflightKitError(v PreflightKitError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePreflightKitError performs a merge with any union data inside the CancelPreflightResponse, using the provided PreflightKitError
func (t *CancelPreflightResponse) MergePreflightKitError(v PreflightKitError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CancelPreflightResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CancelPreflightResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPreflightDescription returns the union data inside the DescribePreflightResponse as a PreflightDescription
func (t DescribePreflightResponse) AsPreflightDescription() (PreflightDescription, error) {
	var body PreflightDescription
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPreflightDescription overwrites any union data inside the DescribePreflightResponse as the provided PreflightDescription
func (t *DescribePreflightResponse) FromPreflightDescription(v PreflightDescription) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePreflightDescription performs a merge with any union data inside the DescribePreflightResponse, using the provided PreflightDescription
func (t *DescribePreflightResponse) MergePreflightDescription(v PreflightDescription) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPreflightKitError returns the union data inside the DescribePreflightResponse as a PreflightKitError
func (t DescribePreflightResponse) AsPreflightKitError() (PreflightKitError, error) {
	var body PreflightKitError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPreflightKitError overwrites any union data inside the DescribePreflightResponse as the provided PreflightKitError
func (t *DescribePreflightResponse) FromPreflightKitError(v PreflightKitError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePreflightKitError performs a merge with any union data inside the DescribePreflightResponse, using the provided PreflightKitError
func (t *DescribePreflightResponse) MergePreflightKitError(v PreflightKitError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DescribePreflightResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DescribePreflightResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPreflightList returns the union data inside the PreflightListResponse as a PreflightList
func (t PreflightListResponse) AsPreflightList() (PreflightList, error) {
	var body PreflightList
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPreflightList overwrites any union data inside the PreflightListResponse as the provided PreflightList
func (t *PreflightListResponse) FromPreflightList(v PreflightList) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePreflightList performs a merge with any union data inside the PreflightListResponse, using the provided PreflightList
func (t *PreflightListResponse) MergePreflightList(v PreflightList) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPreflightKitError returns the union data inside the PreflightListResponse as a PreflightKitError
func (t PreflightListResponse) AsPreflightKitError() (PreflightKitError, error) {
	var body PreflightKitError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPreflightKitError overwrites any union data inside the PreflightListResponse as the provided PreflightKitError
func (t *PreflightListResponse) FromPreflightKitError(v PreflightKitError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePreflightKitError performs a merge with any union data inside the PreflightListResponse, using the provided PreflightKitError
func (t *PreflightListResponse) MergePreflightKitError(v PreflightKitError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PreflightListResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PreflightListResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStatusResult returns the union data inside the PreflightStatusResponse as a StatusResult
func (t PreflightStatusResponse) AsStatusResult() (StatusResult, error) {
	var body StatusResult
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStatusResult overwrites any union data inside the PreflightStatusResponse as the provided StatusResult
func (t *PreflightStatusResponse) FromStatusResult(v StatusResult) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStatusResult performs a merge with any union data inside the PreflightStatusResponse, using the provided StatusResult
func (t *PreflightStatusResponse) MergeStatusResult(v StatusResult) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPreflightKitError returns the union data inside the PreflightStatusResponse as a PreflightKitError
func (t PreflightStatusResponse) AsPreflightKitError() (PreflightKitError, error) {
	var body PreflightKitError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPreflightKitError overwrites any union data inside the PreflightStatusResponse as the provided PreflightKitError
func (t *PreflightStatusResponse) FromPreflightKitError(v PreflightKitError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePreflightKitError performs a merge with any union data inside the PreflightStatusResponse, using the provided PreflightKitError
func (t *PreflightStatusResponse) MergePreflightKitError(v PreflightKitError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PreflightStatusResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PreflightStatusResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStartResult returns the union data inside the StartPreflightResponse as a StartResult
func (t StartPreflightResponse) AsStartResult() (StartResult, error) {
	var body StartResult
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStartResult overwrites any union data inside the StartPreflightResponse as the provided StartResult
func (t *StartPreflightResponse) FromStartResult(v StartResult) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStartResult performs a merge with any union data inside the StartPreflightResponse, using the provided StartResult
func (t *StartPreflightResponse) MergeStartResult(v StartResult) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPreflightKitError returns the union data inside the StartPreflightResponse as a PreflightKitError
func (t StartPreflightResponse) AsPreflightKitError() (PreflightKitError, error) {
	var body PreflightKitError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPreflightKitError overwrites any union data inside the StartPreflightResponse as the provided PreflightKitError
func (t *StartPreflightResponse) FromPreflightKitError(v PreflightKitError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePreflightKitError performs a merge with any union data inside the StartPreflightResponse, using the provided PreflightKitError
func (t *StartPreflightResponse) MergePreflightKitError(v PreflightKitError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StartPreflightResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StartPreflightResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
